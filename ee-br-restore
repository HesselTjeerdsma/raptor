#!/bin/bash

# Set bash environment error management

set -e
set -u

# Source local functions file

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. $script_dir/functions

# Check for root user runtime

check_root

################################################################################

# Source openspace functions file

source_os_functions

################################################################################

os-head_script

################################################################################

os-define_formatting

define_vars

check_config_file

# Source vars from config file

. $install_dir/config

################################################################################

if [[ ! "${@#--skip-ee-install}" = "$@" ]]
then
	echo "${r}${b}- Not [re-]installing EasyEngine as per | --skip-ee-install |...${x}"
	echo
	skip_ee_install=y
fi

if [[ ! "${@#--skip-backup}" = "$@" ]]
then
	echo "${r}${b}- Skipping current sites backup as per | --skip-backup |...${x}"
	echo
	skip_backup=y
fi

if [[ ! "${@#--delete-existing}" = "$@" ]]
then
	echo "${r}${b}- Deleting any already existing site to restore without asking as per | --delete-existing |...${x}"
	echo
	non_interactive_deletion=y
fi

if [[ ! "${@#--enable-php=y}" = "$@" ]]
then
	echo "${b}- Activating PHP on any NON wordpress site to restore without asking as per | --enable-php=y |...${x}"
	echo
	non_interactive_php=y
elif [[ ! "${@#--enable-php=n}" = "$@" ]]
then
	echo "${b}- NOT activating PHP on any NON wordpress site to restore without asking as per | --enable-php=n |...${x}"
	echo
	non_interactive_php=n
fi

if [[ ! "${@#--activate-le=y}" = "$@" ]]
then
	echo "${b}- Provisioning LetsEncrypt TLS certificate for restored sites without asking as per | --enable-php=y |...${x}"
	echo
	non_interactive_le=y
elif [[ ! "${@#--activate-le=o}" = "$@" ]]
then
	echo "${b}- Provisioning LetsEncrypt TLS certificate OPPORTUNISTICALLY for restored sites without asking as per | --enable-php=o |...${x}"
	echo
	non_interactive_le=o
elif [[ ! "${@#--activate-le=n}" = "$@" ]]
then
	echo "${b}- NOT provisioning LetsEncrypt TLS certificate for restored sites without asking as per | --enable-php=n |...${x}"
	echo
	non_interactive_le=n
fi

################################################################################

if [ ! "${skip_ee_install:-null}" = "y" ]
then
	install_easyengine
fi

purge_incomplete_archives

purge_dirs

create_dirs restore

################################################################################

choice="${b}Is the backup you're trying to restore stored locally on this machine [i.e. you're trying to restore a previous state of this running instance of easyengine] or is it stored elsewhere [i.e. you're changing machine or your previous machine's data was wiped or lost]? ${x}"
echo "$choice"
echo
options=("backup file stored locally" "backup file stored elsewhere" "exit")
select opt in "${options[@]}"
do
    echo
    case $opt in
	"backup file stored locally")
	    restoresource=here
	    break
	    ;;
	"backup file stored elsewhere")
	    restoresource=elsewhere
	    break
	    ;;
	"exit")
	    echo "${b}Exiting...${x}"
	    echo
	    exit
	    ;;
	*)
	    echo "${r}${b}Invalid option. Retry...${x}"
	    echo
	    ;;
    esac
done

if [ $restoresource = "here" ]
then

	restore_from_here

else

        if [ "$backuptype" = "s3" ]
        then
                echo "${b}You've previously set up an S3 file storage server connection on this machine.${x}"
                echo
                choice="${b}Do you want to restore from S3 or from a standalone $short_name backup file you have stored individually? ${x}"
                echo "$choice"
		echo
                options=("S3" "standalone" "exit")
                select opt in "${options[@]}"
                do
                    echo
                    case $opt in
                        "S3")
                            restoretype=s3
                            break
                            ;;
                        "standalone")
                            restoretype=standalone
                            break
                            ;;
                        "exit")
                            echo "${b}Exiting...${x}"
                            echo
                            exit
                            ;;
                        *)  echo "${r}${b}Invalid option. Retry...${x}"
                            echo
                            ;;
                    esac
                done
        else
                restoretype=standalone
        fi



        if [ $restoretype = "s3" ]
        then

		restore_from_S3

        else

		restore_from_standalone
		echo

        fi

fi

################################################################################

if [ ! "${skip_backup:-null}" = "y" ]
then

	### Perform a [last] backup of this currently running installation just in case

	echo "${b}Now backing up [locally - no S3 of course] this machine's currently running $short_name installation just in case...${x}"
	echo

	create_dirs backup

	update_storage_info noS3

	purge_backups

	backup_locally

	echo "${b}Now compressing backup...${x}"
	echo

	cd $tmp_dir

	### Tar.bz2 this backup archive. Give local backup a custom name so that it's clear it's the last one before a rollback in time

	tar cSf - $backupname -P | pv -s $(du -sb $backupname | awk '{print $1}') | bzip2 > $archive_dir/$backupname-last-backup-before-"$now"-restore.tar.bz2.incomplete

	mv $archive_dir/$backupname-last-backup-before-"$now"-restore.tar.bz2.incomplete $archive_dir/$backupname-last-backup-before-"$now"-restore.tar.bz2

	echo

	### If not restoring a previous state of this same installation, then move the backups directory to an "old" named one.

	if [ $restoresource = "here" ]
	then

	        echo "${b}Backed up current installation to $archive_dir.${x}"
	        echo

	else

		mkdir -p "$backups_dir"/old
	        mv "$archive_dir" "$backups_dir"/old/archive-old-before-"$now"-restore

		if [ ! -z "${duplicity_log_dir-}" ]
		then
			mkdir -p "$duplicity_log_dir"/old
		        mv "$duplicity_log_dir"/backup/ "$duplicity_log_dir"/old/backup-old-before-"$now"-restore 2> /dev/null || true
		fi

	        echo "${b}Backed up current installation to local backups directory and moved the latter to $backups_dir/old/archive-old-before-$now-restore.${x}"
	        echo
	fi

fi

################################################################################

echo "${b}Now restoring your old easyengine installation from backup...${x}"
echo

if [ $restoresource = "here" ]
then
        restore_file_name="$(echo "$sel_backup_file" | sed 's|./||g' | sed 's/-last-backup.*-restore//' | sed 's/.tar.bz2//g')"
        restorefileloc=$restores_dir/local/$restore_file_name
else
        if [ $restoretype = "s3" ]
        then
                restorefileloc=$restores_dir/s3
        else
                restorefileloc="/root/$short_name-restore"
        fi
fi

for site in $restorefileloc/*
do

	if [ -d "$site" ]
	then

		this_site="$(echo "$site" | sed "s|${restorefileloc}/||")"

		if [ ! $this_site = "22222" ] && [ ! $this_site = "html" ] && [ ! $this_site = "roundcubemail" ]
		then

			echo "${b}*] Now evaluating site | ${g}$this_site${x}${b} |: ${x}"
			echo
			www_site_dir="$www_dir/$this_site"

			proceed=y

			if [ -d $www_site_dir ]
			then

				echo "${r}${b}   This site already exists on this machine.${x}"
				echo

				if [ "${non_interactive_deletion:-null}" = "y" ]
				then
					echo "${b}   Deleting site and re-creating it restoring its respective backup...${x}"
					echo
					ee site delete $this_site --no-prompt
				else

					read -rp "${b}   Delete it and re-create it restoring its respective backup? (Y/n): ${x}" -n 1
					echo
					if [[ ! $REPLY =~ ^[Nn]$ ]]
					then
						echo "${b}   Ok, proceeding...${x}"
						echo
						ee site delete $this_site --no-prompt
					else
						echo
						echo "${b}   Ok, skipping...${x}"
						echo
						proceed=n
					fi

				fi
			fi

			if [ $proceed = y ]
			then

				ee site create $this_site
				echo

				### Test to see if site to be restored is a wordpress site and if it is restore it while replacing new database details

				real_wp_config_file="$site/wp-config.php"
				if [ -f $real_wp_config_file ]
				then

					echo "${b}   Proceeding with ${l}wordpress${x}${b} site restore...${x}"
					echo

					ee site update $this_site --wpfc
					echo

					www_wp_config_file="$www_site_dir/wp-config.php"

					www_WPDBNAME=`cat $www_wp_config_file | grep DB_NAME | cut -d \' -f 4`
					www_WPDBUSER=`cat $www_wp_config_file | grep DB_USER | cut -d \' -f 4`
					www_WPDBPASS=`cat $www_wp_config_file | grep DB_PASSWORD | cut -d \' -f 4`

					old_WPDBNAME=`cat $real_wp_config_file | grep DB_NAME | cut -d \' -f 4`
					old_WPDBUSER=`cat $real_wp_config_file | grep DB_USER | cut -d \' -f 4`
					old_WPDBPASS=`cat $real_wp_config_file | grep DB_PASSWORD | cut -d \' -f 4`

					rm "$www_wp_config_file"
					cp "$real_wp_config_file" "$www_wp_config_file"

					sed -i "s|${old_WPDBNAME}|${www_WPDBNAME}|g" "$www_wp_config_file"
					sed -i "s|${old_WPDBUSER}|${www_WPDBUSER}|g" "$www_wp_config_file"
					sed -i "s|${old_WPDBPASS}|${www_WPDBPASS}|g" "$www_wp_config_file"

					mysql -u"$www_WPDBUSER" -p"${www_WPDBPASS}" "${www_WPDBNAME}" < "$site/mysqldump.sql"

				else

					echo "${b}   Proceeding with ${m}NON wordpress${x}${b} site restore...${x}"
					echo

					if [ "${non_interactive_php:-null}" = "y" ]
					then

						echo "${b}   Activating PHP on this site...${x}"
						echo
						ee site update $this_site --php
						echo

					elif [ "${non_interactive_php:-null}" = "n" ]
					then
						echo "${b}   NOT activating PHP on this site...${x}"
						echo

					else

						read -rp "${b}   Activate PHP on restored site? (Y/n): ${x}" -n 1
						echo
						if [[ ! $REPLY =~ ^[Nn]$ ]]
						then
							echo "${b}   Ok, proceeding...${x}"
							echo
							ee site update $this_site --php
							echo
							echo
						else
							echo
							echo "${b}   Ok, skipping...${x}"
							echo
						fi

					fi

				fi

				rsync -aAXx --exclude wp-config.php --exclude mysqldump.sql "$site"/ "$www_site_dir"

				if [ "${non_interactive_le:-null}" = "y" ]
				then
					echo "${b}   Provisioning LetsEncrypt TLS certificate for restored site...${x}"
					echo
					activate_le_proceed=y
				elif [ "${non_interactive_le:-null}" = "o" ]
				then
					echo "${b}   Provisioning LetsEncrypt TLS certificate for restored site if DNS checks succeed...${x}"
					echo
					activate_le_proceed=o
				elif [ "${non_interactive_le:-null}" = "n" ]
				then
					echo "${b}   NOT provisioning LetsEncrypt TLS certificate for restored site...${x}"
					echo
				else
					read -rp "${b}   Also provision LetsEncrypt TLS certificate for restored site? (Y/n): ${x}" -n 1
					echo
					if [[ ! $REPLY =~ ^[Nn]$ ]]
					then
						echo "${b}   Ok, proceeding...${x}"
						echo
						activate_le_proceed=y
					else
						echo
						echo "${b}   Ok, skipping...${x}"
						echo
					fi
				fi

				if [ "${activate_le_proceed:-null}" = "y" ] || [ "${activate_le_proceed:-null}" = "o" ]
				then

					hostname="$this_site"

					declare -a dnsarray=(
			                        "hostname"
			                        )

					# Skip IPv6 checks as EasyEngine doesn't yet support it [WTF!!!]

					declare -a iparray=(
			                        "v4"
			                        )

					declare -A digarray=(
						[HN]=""
						[www]="www."
					)

					dnschecktype=$hostname
					thisipv4="$(dig +short myip.opendns.com @resolver1.opendns.com)"

					for dnstype in "${dnsarray[@]}"
				        do

				        	for ipversion in "${iparray[@]}"
				        	do

		        				echo "${b}   Now let's make sure your site's IP$ipversion DNS settings are correct.${x}"
		        				echo

			        			digarrayiter=0

			        			for i in "${!digarray[@]}"
			        			do

			        				digarrayiter=$((digarrayiter + 1))

		        					echo "${b}   $digarrayiter] Now checking the ${digarray[$i]}$dnschecktype DNS record in IP$ipversion...${x}"
		        					echo

			        				accept=n
			        				until [ $accept = "y" ]
			        				do

		        						if [ "$ipversion" = "v4" ]
		        						then
		        				                	thisip=$thisipv4
		        							digresult="$(getent ahostsv4 "${digarray[$i]}""$dnschecktype". | head -1 |sed 's/ .*//')"
		        				                	rectype="A"
		        						else
		        				                	thisip=$thisipv6
		        				                	digresult="$(getent ahostsv6 "${digarray[$i]}""$dnschecktype". | grep -v "$thisipv4" | head -1 | sed 's/ .*//')"
		        				                	rectype="AAAA"
		        						fi

			        					if [ -z "$digresult" ]
			        					then

			        						if [ ! "$dnstype" = "SRV" ]
			        						then
			        							echo "${r}${b}   The ${digarray[$i]}$dnschecktype IP$ipversion DNS record does NOT appear to be at all set.${x}"
			        							echo
			        						else
			        							echo "${r}${b}   The ${digarray[$i]}$dnschecktype SRV record does NOT appear to be at all set.${x}"
			        							echo
			        						fi

			        						echo "${b}   Please ensure you set your DNS record as follows:${x}"
			        						echo
			        						echo -e "   | ${digarray[$i]}$dnschecktype\\t\\t$rectype\\t$thisip |"
			        						echo
			        						if [ ! "${digarray[$i]}$dnschecktype" = "$hostname" ]
			        						then
			        							if [ $rectype = "A" ] || [ $rectype = "AAAA" ]
			        							then
			        								if [ "$ipversion" = "v4" ]
			        								then
			        									echo "${g}${b}   You can also set this record as a CNAME [suggested choice]:${x}"
			        									echo
			        									echo -e "   | ${digarray[$i]}$dnschecktype\\t\\tCNAME\\t$hostname |"
			        									echo
			        								fi
			        							fi
			        						fi
			        						result=notset
			        					else
			        						if [ "$digresult" = "$thisip" ]
			        						then

			        							if [ ! "$dnstype" = "SRV" ]
			        							then
			        								echo "${g}${b}   The ${digarray[$i]}$dnschecktype IP$ipversion DNS record appears to resolve correctly to this server.${x}"
			        								echo
			        							else
			        								echo "${g}${b}   The ${digarray[$i]}$dnschecktype SRV record appears to resolve correctly to this server.${x}"
			        								echo
			        							fi

			        							echo -e "   | ${digarray[$i]}$dnschecktype\\t\\t$rectype\\t$thisip |"
			        							echo
			        							result=ok
			        						else

			        							if [ ! "$dnstype" = "SRV" ]
			        							then
			        								echo "${r}${b}   The ${digarray[$i]}$dnschecktype IP$ipversion DNS record does NOT appear to correctly resolve to this server.${x}"
			        								echo
			        							else
			        								echo "${r}${b}   The ${digarray[$i]}$dnschecktype SRV record does NOT appear to correctly resolve to this server.${x}"
			        								echo
			        							fi

			        							echo "${b}   This is the result of a DNS query for ${digarray[$i]}$dnschecktype:${x}"
			        							echo
			        							echo "   $digresult"
			        							echo
			        							echo "${b}   Please set it instead to:${x}"
			        							echo
			        							echo -e "   | ${digarray[$i]}$dnschecktype\\t\\t$rectype\\t$thisip |"
			        							echo
			        							if [ ! "${digarray[$i]}$dnschecktype" = "$hostname" ]
			        							then
			        								if [ $rectype = "A" ] || [ $rectype = "AAAA" ]
			        								then
			        									if [ "$ipversion" = "v4" ]
			        									then
			        										echo "${g}${b}   You can also set this record as a CNAME [suggested choice]:${x}"
			        										echo
			        										echo -e "   | ${digarray[$i]}$dnschecktype\\t\\tCNAME\\t$hostname |"
			        										echo
			        									fi
			        								fi
			        							fi
			        							result=incorrect
			        						fi
			        					fi

			        					if [ ! $result = "ok" ]
			        					then

										if [ "${activate_le_proceed:-null}" = "y" ]
										then

											valid=n
				        						until [ $valid = "y" ]
				        						do
				        							read -n 1 -rp "${b}   Test again?${x} (${b}Y${x}[es]/${b}s${x}[kip]/${b}e${x}[xit]) " answer;
				        							case $answer in
				        							"")
				        								echo
				        								valid=y
				        								accept=n
				        								;;
				        							y)
				        								echo -e "\\n"
				        								valid=y
				        								accept=n
				        								;;
				        							s)
				        								echo -e "\\n"
				        								echo "${b}   Skipping DNS check for this record...${x}"
				        								echo
				        								valid=y
				        								accept=y
				        								;;
				        							e)
				        								echo -e "\\n"
				        		        					echo "${b}   Exiting...${x}"
				        		        					echo
				        		        					exit
				        		        					;;
				        							*)
				        								echo -e "\\n"
				        								echo "${b}   Invalid option. Retry...${x}"
				        		        					echo
				        								valid=n
				        								accept=n
				        				        			;;
				        							esac
				        						done

										else

											echo "${r}${b}   DNS test failed for this record. Continuing anyway...${x}"
											echo
											accept=y

										fi

									else

			        						accept=y

			        					fi

			        				done

							if [ $result = ok ]
							then

								if [ $i = "HN" ]
								then
									le_dns_check_HN=ok
								else
									le_dns_check_www=ok
								fi

							fi

			        			done

	        				echo "${b}   Finished checking your $dnstype IP$ipversion DNS settings.${x}"
	        				echo

				        	done

				        done

					if [ "${le_dns_check_HN:-null}" = "ok" ] && [ "${le_dns_check_www:-null}" = "ok" ]
					then
						echo "${g}${b}   Activating LetsEncrypt for $this_site...${x}"
						echo
						ee site update $this_site --le --experimental || true
						echo
					else
						echo "${r}${b}   One or more DNS checks for $this_site failed and was skipped.${x}"
						echo
						echo "${b}   NOT activating LetsEncrypt for $this_site."
						echo
					fi

					if [ ! -z "${le_dns_check_HN-}" ]
					then
					        unset le_dns_check_HN
					fi

					if [ ! -z "${le_dns_check_www-}" ]
					then
					        unset le_dns_check_www
					fi

					if [ ! -z "${activate_le_proceed-}" ]
					then
					        unset activate_le_proceed
					fi

				fi

				echo "${b}   Finished restore for | $this_site |.${x}"
				echo

			fi

		fi

	fi

done

purge_dirs

echo "${g}${b}Restore complete!${x}"
echo
