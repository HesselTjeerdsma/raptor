#!/bin/bash

set -e
set -u

r=`tput setaf 1`
g=`tput setaf 2`
l=`tput setaf 4`
m=`tput setaf 5`
x=`tput sgr0`
b=`tput bold`

################################################################################

# Don't change these! | No trailing slash!
projname="EasyEngine-Backup-Restore"
sourcedir=/root/$projname
basedir=/root/openspace42
installdir=$basedir/ee-br
backupsdir=$installdir/backups
archivedir=$backupsdir/archive
latestdir=$backupsdir/latest
restoresdir=$installdir/restores
tmpdir=/tmp/ee-br
wwwdir=/var/www

echo

if [[ $EUID -ne 0 ]]
then
	echo "${r}${b}This script must be run as root. Run it as:${x}"
	echo
	echo "${b}sudo bash $installdir/ee-br-backup${x}"
	echo
        # Send email indicating backup aborted
        echo "${b}Exiting...${x}"
        echo
        exit
fi

if [ -f $basedir/DFBS/run-ok ]
then
        echo "${g}${b}Debian First Boot Setup was previously run successfully. Continuing...${x}"
        echo
else
	echo "${r}${b}Debian First Boot Setup was NOT previously run successfully OR the system was not rebooted at the end.${x}"
	echo
	read -p "${b}Run it now? (Y/n): ${x}" -n 1 -r
	echo
	if [[ ! $REPLY =~ ^[Nn]$ ]]
	then
		echo "${b}Ok, running DFBS now...${x}"
		echo
		echo "${b}After you're done running DFBS [make sure you reboot this machine at the end], simply run the installer again.${x}"
		echo
		sleep 3
		if [ -d "/root/Debian-First-Boot-Setup" ]
		then
			rm -r "/root/Debian-First-Boot-Setup"
		fi
		git clone https://github.com/openspace42/Debian-First-Boot-Setup
		clear
		bash Debian-First-Boot-Setup/script.sh
		exit
	else
		echo "${b}No problem, you can run it [make sure you reboot this machine at the end] by executing the following commands:${x}"
		echo
		echo "${b} | git clone https://github.com/openspace42/Debian-First-Boot-Setup |${x}"
		echo
		echo "${b} | bash Debian-First-Boot-Setup/script.sh |${x}"
		echo
		echo "${b}Exiting...${x}"
		echo
		exit
	fi
fi

################################################################################



echo "${b}Initiating installer...${x}"
echo



echo "${b}Now installing dependencies...${x}"
echo
hostname="$(cat /etc/hostname)"
apt-add-repository ppa:duplicity-team/ppa -y
apt-get update
apt-get -y install duplicity python-pip pwgen pv python-boto composer
pip install --upgrade pip
pip install boto
debconf-set-selections <<< "postfix postfix/mailname string $hostname"
debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"
apt-get install -y mailutils
/etc/init.d/postfix reload
echo
echo "${b}Finished installing dependencies.${x}"
echo



echo "${b}Now [re-]installing and updating easyengine...${x}"
echo
wget -qO ee rt.cx/ee
bash ee || true
rm ee
source /etc/bash_completion.d/ee_auto.rc
ee update
mkdir -p /var/www/
chown -R www-data:www-data /var/www/
ufw allow 80
ufw allow 443
ufw allow 22222
ee stack install --all || true
( cd /var/www/22222/htdocs/db/pma && composer install && sudo chown www-data: * -R )
echo
echo "${b}Finished installing easyengine.${x}"
echo




echo "${b}Now installing scripts in | $installdir/ | ...${x}"
echo
if [ -d $installdir ]
then
        now="$(date +"%Y-%m-%d_%H-%M-%S")"
        echo "${g}${b}Found existing installation.${x}"
        echo
	if [ ! -f $installdir/config ]
	then
		echo "${r}${b} | config | file NOT found in existing installation. Creating a new one now...${x}"
	        echo
		rsync -aAXx $sourcedir/ $installdir/ --exclude=install --exclude=README.md
	else
		echo "${b}Preserving old | config | file...${x}"
		echo
        	rsync -aAXx $sourcedir/ $installdir/ --exclude=config --exclude=install --exclude=README.md
	fi
else
        rsync -aAXx $sourcedir/ $installdir/ --exclude=install --exclude=README.md
fi
echo "${b}Finished installing scripts.${x}"
echo



echo "${b}Now adding backup script to daily crontab...${x}"
echo
touch /etc/cron.daily/ee-br-backup
chmod 755 /etc/cron.daily/ee-br-backup
echo -e '#!/bin/bash' > /etc/cron.daily/ee-br-backup
echo >> /etc/cron.daily/ee-br-backup
echo "bash $installdir/ee-br-backup" >> /etc/cron.daily/ee-br-backup
echo "${b}Finished adding backup script to daily crontab...${x}"
echo



echo "${b}Now removing installer directory...${x}"
echo
rm -r $sourcedir
echo "${b}Finished removing installer directory.${x}"
echo



echo "${b}Installation complete!...${x}"
echo
