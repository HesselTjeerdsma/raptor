#!/bin/bash

################################################################################

### Set bash environment error management

set -e
set -u

### Source local functions file

echo
source_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

if [[ "$source_dir" == */tools ]]
then
        source_dir="${source_dir%/tools}"
fi

. $source_dir/functions

### Source openspace functions file

source_os_functions

### Define formatting

os-define_formatting

### Define variables

define_vars

################################################################################

check_root

os-head_script

os-read_conf_settings

################################################################################

### Read raptor-specific restore script arguments

while getopts ":ibdp:l:e:" arguments; do
	case $arguments in
		i)	skip_ee_install="y"
		echo "${r}${b}- Not [re-]installing EasyEngine as per | -i |...${x}"
		echo
		;;
		b)	skip_backup="y"
		echo "${r}${b}- Skipping current sites backup as per | -b |...${x}"
		echo
		;;
		d)	delete_existing="y"
		echo "${r}${b}- Deleting any already existing site to restore without asking as per | -d |...${x}"
		echo
		;;
		p)	enable_php="$OPTARG"
		;;
		l)	enable_le="$OPTARG"
		;;
		c)	content="$OPTARG"
		;;
		e)	exclude_sites="$OPTARG"
		;;
		\?)	echo "${r}${b}Invalid option | -$OPTARG | for function | ${FUNCNAME[0]} |.${x}"
		echo
		os-exit_function
		;;
	esac
done

if [ ! -z "${enable_php-}" ]
then
	case "$enable_php" in
		y)	echo "${b}- Activating PHP on any NON wordpress site to restore without asking as per | -p y |...${x}"
		echo
		;;
		n)	echo "${b}- NOT activating PHP on any NON wordpress site to restore without asking as per | -p n |...${x}"
		echo
		;;
		*)	echo "${r}${b}Invalid content for | -p | argument in function | ${FUNCNAME[0]} |.${x}"
		echo
		os-exit_function
		;;
	esac
fi

if [ ! -z "${enable_le-}" ]
then
	case "$enable_le" in
		y)	echo "${b}- Provisioning LetsEncrypt TLS certificate for restored sites without asking as per | -l y |...${x}"
		echo
		;;
		o)	echo "${b}- Provisioning LetsEncrypt TLS certificate OPPORTUNISTICALLY for restored sites without asking as per | -l o |...${x}"
		echo
		;;
		n)	echo "${b}- NOT provisioning LetsEncrypt TLS certificate for restored sites without asking as per | -l n |...${x}"
		echo
		;;
		*)	echo "${r}${b}Invalid content for | -l | argument in function | ${FUNCNAME[0]} |.${x}"
		echo
		os-exit_function
		;;
	esac
fi

if [ ! -z "${exclude_sites-}" ]
then
	if [ ! "${exclude_sites-null}" = "" ]
	then
		echo "${b}- Excluding sites | ${r}$exclude_sites${x}${b} | from restore as per | -e [...] |...${x}"
		echo
	else
		echo "${r}${b}Invalid content for | -e | argument in function | ${FUNCNAME[0]} |.${x}"
		echo
		echo "${b}Argument value must be defined and be a quoted comma-space delimited list of sites to exclude form restore.${x}"
		echo
		os-exit_function
	fi
fi

################################################################################

if [ ! "${skip_ee_install:-null}" = "y" ]
then
	install_easyengine
fi

################################################################################

os-br_purge_incomplete_archives

os-br_purge_dirs

os-br_create_dirs restore

################################################################################

os-br_restore_from_standalone_content_description() {
	echo "${b}1] /root/$short_name-restore/config${x}"
	echo "${b}2] /root/$short_name-restore/ejabberd-mnesia-backup${x}"
	echo "${b}3] /root/$short_name-restore/etc-ejabberd${x}"
	echo "${b}4] /root/$short_name-restore/var-lib-ejabberd${x}"
}

os-br_launch_restore

################################################################################

### Perform a [last] backup of this currently running installation just in case

if [ ! "${skip_backup:-null}" = "y" ]
then

	os-br_last_local_backup

fi

################################################################################

restore_loop

os-br_purge_dirs

echo "${g}${b}Restore complete!${x}"
echo
