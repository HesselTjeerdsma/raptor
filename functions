#!/bin/bash

### openspace bash installer v0.1.0 [https://github.com/openspace42/bash_installer]

os_bash_functions_version=0.1.2

################################################################################

define_vars() {

	proj_name="EasyEngine-Backup-Restore"
	short_name="ee-br"
	author_name="openspace42"

	os-define_vars

}

################################################################################

check_root() {

	if [[ $EUID -ne 0 ]]
	then
		echo "${r}${b}This script must be run as root${x}"
		echo
		echo "${b}Exiting...${x}"
		echo
		exit 1
	fi

}

download_os_functions() {

	clone_author=openspace42
	clone_name=bash_functions
	base_dir=/root/$clone_author
	clone_dir=$base_dir/$clone_name
	if [ -d $clone_dir ]
	then
		rm -r ${clone_dir:?}
	fi
	mkdir -p $base_dir
	( cd $base_dir && git clone https://github.com/$clone_author/$clone_name && cd $clone_name && if [ ! ${bleeding_edge-null} = "-b" ]; then git checkout tags/v$os_bash_functions_version; fi &> /dev/null )

}

source_os_functions() {

	for f in /root/openspace42/bash_functions/*
	do
		. $f
	done

}

################################################################################

install_easyengine() {

	distro="$(lsb_release --id | cut -f2)"

	if [ $distro = "Ubuntu" ]
	then

		echo "${g}${b}Detected Ubuntu distro. Proceeding with full install...${x}"
		echo

		echo "${b}Now installing dependencies...${x}"
		echo
		hostname="$(cat /etc/hostname)"
		apt-add-repository ppa:duplicity-team/ppa -y
		apt-get update
		apt-get -y install duplicity python-pip pwgen pv python-boto composer ufw pwgen software-properties-common curl cronic
		pip install --upgrade pip
		pip install boto
		echo
		echo "${b}Finished installing dependencies.${x}"
		echo

		read -p "${b}Also [purge and re-]install the local mail server for task notifications? (Y/n): ${x}" -n 1 -r
		echo
		if [[ ! $REPLY =~ ^[Nn]$ ]]
		then
			apt-get -y purge mailutils postfix || true
			debconf-set-selections <<< "postfix postfix/mailname string $hostname"
			debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"
			apt-get install -y mailutils
			/etc/init.d/postfix reload
		fi

		echo "${b}Now [re-]installing and updating easyengine...${x}"
		echo

		wget -qO ee rt.cx/ee
		bash ee || true
		rm ee
		source /etc/bash_completion.d/ee_auto.rc
		ee update
		rm /tmp/eeupdate*
		mkdir -p /var/www/
		chown -R www-data:www-data /var/www/
		ufw allow 80
		ufw allow 443
		echo

		read -p "${b}Also install full EasyEngine stack and PhpMyAdmin? (Y/n): ${x}" -n 1 -r
		echo
		if [[ ! $REPLY =~ ^[Nn]$ ]]
		then
			ufw allow 22222
			ee stack install --all || true
			#( cd /var/www/22222/htdocs/db/pma && composer install && sudo chown www-data: * -R )
		fi

		echo
		echo "${b}Finished installing easyengine.${x}"
		echo

	else

		echo "${r}${b}Detected NON-Ubuntu distro [mail notifications might not work]. Proceeding...${x}"
		echo

		echo "${b}Now installing dependencies...${x}"
		echo
		hostname="$(cat /etc/hostname)"
		apt-get update
		apt-get -y install duplicity python-pip pwgen pv python-boto ufw pwgen software-properties-common curl
		pip install --upgrade pip
		pip install boto
		debconf-set-selections <<< "postfix postfix/mailname string $hostname"
		debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"
		apt-get install -y mailutils
		echo
		echo "${b}Finished installing dependencies.${x}"
		echo

		echo "${b}Now [re-]installing and updating easyengine...${x}"
		echo

		wget -qO ee rt.cx/ee
		bash ee || true
		rm ee
		source /etc/bash_completion.d/ee_auto.rc
		ee update
		rm /tmp/eeupdate*
		mkdir -p /var/www/
		chown -R www-data:www-data /var/www/
		ufw allow 80
		ufw allow 443
		echo

		echo "${b}Finished installing easyengine.${x}"
		echo

	fi

}



backup_locally() {

	echo "${b}Now backing up locally...${x}"
	echo

	### Add hardcoded sites to exclude to the user-specified ones

	backup_exclude_sites="22222, html, roundcubemail, $backup_exclude_sites"

	for site in $www_dir/*
	do
		if [ -d "$site" ]
		then
			this_site="$(echo "$site" | sed "s|${www_dir}/||")"
			if [ "${backup_exclude_sites/$this_site}" = "$backup_exclude_sites" ]
			then
				echo "${b}*] Now evaluating site | ${g}$this_site${x}${b} |: ${x}"
				echo
				this_site_dir="$tmp_backup_dir/$this_site"
				mkdir -p $this_site_dir
				wpconfigfile="$site/wp-config.php"
				if [ -f $wpconfigfile ]
				then
					echo "${b}   Proceeding with ${l}wordpress${x}${b} site backup...${x}"
					echo
					WPDBNAME=`cat $wpconfigfile | grep DB_NAME | cut -d \' -f 4`
					WPDBUSER=`cat $wpconfigfile | grep DB_USER | cut -d \' -f 4`
					WPDBPASS=`cat $wpconfigfile | grep DB_PASSWORD | cut -d \' -f 4`
					/usr/bin/mysqldump -u $WPDBUSER -p$WPDBPASS $WPDBNAME > $this_site_dir/mysqldump.sql
					cp $wpconfigfile $this_site_dir/wp-config.php
				else
					echo "${b}   Proceeding with ${m}NON wordpress${x}${b} site backup...${x}"
					echo
				fi

				rsync -aAXx --exclude backup --exclude conf --exclude logs "$site"/ "$this_site_dir"

				echo "${b}   Finished backup for | $this_site |.${x}"
				echo
			else
				echo "${b}*] Site | ${r}$this_site${x}${b} | is on the exclusion list.${x}"
				echo
				echo "${b}   Skipping...${x}"
				echo
			fi
		fi
	done
	echo "${g}${b}Finished local backup.${x}"
	echo

}
