#!/bin/bash

# Set bash environment error management

set -e
set -u

# Source local functions file

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. $script_dir/functions

# Check for root user runtime

check_root

################################################################################

# Source openspace functions file

source_os_functions

################################################################################

os-log_script

################################################################################

os-define_formatting

define_vars

os-read_conf_settings

################################################################################

os-br_purge_incomplete_archives

os-br_purge_dirs

os-br_create_dirs backup

os-br_update_storage_info

os-br_purge_backups

backup_locally

echo "${b}Now compressing backup...${x}"
echo

cd $tmp_dir

### Tar.bz2 this backup archive.

tar cSf - $backup_name -P | pv -s $(du -sb $backup_name | awk '{print $1}') | bzip2 > $backups_archive_dir/$backup_name.tar.bz2.incomplete

mv $backups_archive_dir/$backup_name.tar.bz2.incomplete $backups_archive_dir/$backup_name.tar.bz2

echo
echo "${g}${b}Finished compressing backup and stored in | $backups_archive_dir/ | ${x}"
echo

################################################################################

if [ "$backup_location" = "s3" ]
then

	mv "$tmp_backup_dir"/* "$backups_latest_dir"

	########################################################################

	os-br_restore_from_S3 test

	########################################################################

	os-br_backup_to_S3

else

	rm -r "$tmp_backup_dir"

fi

if [ -d $tmp_dir ]
then
	rm -r ${tmp_dir:?}
fi

echo "${g}${b}Backup complete!${x}"
echo
os-br_purge_dirs
